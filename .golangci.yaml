# options for analysis running
run:
  deadline: 20s
  tests: true
  skip-dirs:
    - generated
  skip-files:
    - ".*\\.pb\\.go"
  silent: true

# output configuration options
output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true
  govet:
    check-shadowing: false
    disable:
      - shadow
  gofmt:
    simplify: true
  goconst:
    min-len: 3
    min-occurrences: 3
  misspell:
    locale: UK
  unused:
    check-exported: true
  unparam:
    algo: cha
  nakedret:
    max-func-lines: 30
  prealloc:
    simple: true
    range-loops: true
    for-loops: true

linters:
  enable:
    - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes [fast: true]
    - misspell # Finds commonly misspelled English words in comments [fast: true]
    - nakedret # Finds naked returns in functions greater than a specified function length [fast: true]
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases [fast: false]
    - gas # Inspects source code for security problems [fast: false]
    - structcheck # Finds an unused struct fields [fast: false]
    - interfacer # Linter that suggests narrower interface types [fast: false]
    - unconvert # Remove unnecessary type conversions [fast: false]
    - unparam # Reports unused function parameters [fast: false]
    - prealloc # Finds slice declarations that could potentially be preallocated [fast: true]
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports [fast: true]
    - lll # Reports long lines [fast: true]
    - megacheck # 3 sub-linters in one: unused, gosimple and staticcheck [fast: false]

  disable:
    - staticcheck # (megacheck) Staticcheck is a go vet on steroids, applying a ton of static analysis checks [fast: false]
    - unused # (megacheck) Checks Go code for unused constants, variables, functions and types [fast: false]
    - gosimple # (megacheck) Linter for Go source code that specializes in simplifying a code [fast: false]
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification [fast: true]
    - dupl # Tool for code clone detection [fast: true]
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code [fast: false]
    - depguard # Go linter that checks if package imports are in a list of acceptable packages [fast: false]
    - varcheck # Finds unused global variables and constants [fast: false]
    - deadcode # Finds unused code [fast: false]
    - goconst # Finds repeated strings that could be replaced by a constant [fast: true]
    - gocyclo # Computes and checks the cyclomatic complexity of functions [fast: true]
    - maligned # Tool to detect Go structs that would take less memory if their fields were sorted [fast: false]

issues:
  exclude-use-default: false
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of
      .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv|.*Disconnect).
      is not checked

    # golint: Exported variables are rarely used and generally reserved for errors which should be self explanitory
    - exported var \w+ should have comment or be unexported

    # golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that
      stutters; consider calling this

    # gas: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited

    # gas: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)

    # gas: Duplicated errcheck checks
    - G104

    # gas: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions
      to be 0600 or less)

    # gas: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable

    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)

    # megacheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop

    # disable comments
    - exported [a-z]+ `?[^ ]+ should have comment

